(define (square x)
  (* x x))
(define (improve guess n)
    (/ (+ guess (/ n guess)) 2))
(define (is_good_enough guess n)
    (< (abs (- n (square guess))) 0.0001 ))
(define (is_good_enough_2 guess last_guess)
    (< (abs (- guess last_guess)) 0.0001 ))
(define (sqrt_iter n guess last_guess)
    ((cond ((is_good_enough_2 guess last_guess) guess)
        (else (sqrt_iter n (improve guess n) guess)))))
(define (sqrt n)
    (sqrt_iter n 1 2))

(sqrt 2)
